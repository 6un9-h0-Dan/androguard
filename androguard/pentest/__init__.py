from . import adb

import frida
from loguru import logger

class Pentest:
    def __init__(self):
        self.device = None
        self.frida_session = None
        self.pid = -1
        self.detached = False
        self.script = None

    def disconnect(self):   
        self.device = None
        self.frida_session = None
        self.pid = -1
        self.script = None

    def print_devices(self):
        logger.info("List of devices")
        devices = frida.enumerate_devices()
        for i in range(len(devices)):
            logger.info('{}) {}'.format(i, devices[i]))

    def connect_default_usb(self):
        self.device = frida.get_usb_device()
        logger.info("Connected to device {}".format(self.device))

    def _load_scripts(self, scripts):
        data_scripts = ""
        
        for script_file in scripts:
            with open(script_file, 'r') as file:
                data_scripts += file.read()
                data_scripts += '\n\n'
        
        return data_scripts

    def load_scripts(self, scripts):
        return self._load_scripts(['androguard/pentest/modules/utils.js'] + scripts)

    def start_strace(self, filename, session):
        if not self.device:
            logger.error("Not connected to any device yet")
            return

        adb.adb(self.device.id, "install {}".format(session.added_files[0]))

        apk_obj, dex_objs, dx_obj = session.get_objects_apk(filename)
        if not apk_obj:
            logger.error("Can't find any APK object associated")
            return
        
        logger.info("Starting package {}".format(apk_obj.get_package()))

        self.pid = self.device.spawn([apk_obj.get_package()])
        self.frida_session = self.device.attach(self.pid)
        self.frida_session.on('detached',self.on_detached)


        self.script = self.frida_session.create_script(self.load_scripts(['androguard/pentest/modules/ipc/intents.js']))

        self.script.on("message",self.my_message_handler)
        self.script.load()  

        self.device.resume(self.pid)

        logger.warning("Type 'e' to exit the strace ")
        s = ""
        while (s!='e') and (not self.detached):
            s = input("Type 'e' to exit:")          
            
        if self.script:
            self.script.unload()


    def my_message_handler(self, message, payload):
        logger.info("MESSAGE {} {}".format(message, payload))

    def on_detached(self, reason):
        logger.info("Session is detached due to:", reason)
        self.detached = True
    

